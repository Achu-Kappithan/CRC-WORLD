<!DOCTYPE html>
<html lang="en">
  <%- include("../layouts/admin/admin_header.ejs") %>

  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
  />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <style>
    .additional-fields {
      display: none;
      margin-top: 10px;
    }
  </style>

  <body>
    <%- include("../layouts/admin/slidbar.ejs") %>

    <main class="main-wrap">
      <%- include("../layouts/admin/navbar.ejs") %>

      <section class="content-main">
        <div class="row">
          <div class="col-9">
            <div class="content-header">
              <h2 class="content-title">Add New Product</h2>

              <% if (errorMessage.length > 0) { %>
              <div class="alert alert-danger">
                <p><%= errorMessage %></p>
              </div>
              <% } %> <% if (successMessage.length > 0) { %>
              <div class="alert alert-success">
                <p><%= successMessage %></p>
              </div>
              <% } %>

              <form
                action="/add_product"
                method="post"
                onsubmit="return validate()"
                enctype="multipart/form-data"
              >
                <div>
                  <button
                    type="submit"
                    class="btn btn-md rounded font-sm hover-up"
                  >
                    Publish
                  </button>
                </div>
              
            </div>
          </div>

          <div class="col-lg-6">
            <div class="card mb-4">
              <div class="card-header">
                <h4>Basic</h4>
              </div>

              <div class="card-body">
                <div class="mb-4">
                  <label for="productname" class="form-label"
                    >Product title</label
                  >
                  <input
                    name="productname"
                    type="text"
                    placeholder="Enter product name"
                    class="form-control"
                    id="productname"
                  />
                  <span id="errorname" class="text-danger"></span>
                </div>

                <div class="mb-4">
                  <label class="form-label">Full description</label>
                  <textarea
                    name="productdis"
                    id="productdiscription"
                    placeholder="Type here"
                    class="form-control"
                    rows="4"
                  ></textarea>
                  <span id="errdiscription" class="text-danger"></span>
                </div>

                <label class="form-label">Select Size:</label>
                <br /><br />
                <div class="container mt-4">
                  <div class="row">
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <input type="radio" name="size" id="sm" value="SM" />
                        <label for="sm">Small</label>
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <input
                          type="radio"
                          name="size"
                          id="medium"
                          value="Medium"
                        />
                        <label for="medium">Medium</label>
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <input type="radio" name="size" id="l" value="L" />
                      <label for="l">Large</label>
                    </div>
                  </div>

                  <div id="additionalFieldsSM" class="additional-fields">
                    <h5>Small Size</h5>
                    <div class="form-group">
                      <label for="stockSM">Stock:</label>
                      <input
                        type="number"
                        id="stockSM"
                        name="size[SM][stock]"
                        class="form-control"
                        min="0"
                        placeholder="Enter stock count"
                      />
                    </div>
                    <div class="form-group">
                      <label for="actualPriceSM">Actual Price:</label>
                      <input
                        type="number"
                        id="actualPriceSM"
                        name="size[SM][actualPrice]"
                        class="form-control"
                        step="0.01"
                        placeholder="Enter actual price"
                      />
                    </div>
                  </div>

                  <div id="additionalFieldsMedium" class="additional-fields">
                    <h5>Medium Size</h5>
                    <div class="form-group">
                      <label for="stockMedium">Stock:</label>
                      <input
                        type="number"
                        id="stockMedium"
                        name="size[Medium][stock]"
                        class="form-control"
                        min="0"
                        placeholder="Enter stock count"
                      />
                    </div>
                    <div class="form-group">
                      <label for="actualPriceMedium">Actual Price:</label>
                      <input
                        type="number"
                        id="actualPriceMedium"
                        name="size[Medium][actualPrice]"
                        class="form-control"
                        step="0.01"
                        placeholder="Enter actual price"
                      />
                    </div>
                  </div>

                  <div id="additionalFieldsL" class="additional-fields">
                    <h5>Large Size</h5>
                    <div class="form-group">
                      <label for="stockL">Stock:</label>
                      <input
                        type="number"
                        id="stockL"
                        name="size[L][stock]"
                        class="form-control"
                        min="0"
                        placeholder="Enter stock count"
                      />
                    </div>
                    <div class="form-group">
                      <label for="actualPriceL">Actual Price:</label>
                      <input
                        type="number"
                        id="actualPriceL"
                        name="size[L][actualPrice]"
                        class="form-control"
                        step="0.01"
                        placeholder="Enter actual price"
                      />
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </div>

          <div class="col-lg-3">
            <div class="card mb-4">
              <div class="card-header">
                <h4>Media</h4>
              </div>

              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

              <div class="input-upload">
                <label for="image" class="form-label">Upload Images</label>
                <input
                  type="file"
                  name="productimage"
                  class="form-control"
                  id="image"
                  multiple
                  onchange="handleFiles(event)"
                />
                <div id="imagePreview" class="mt-3"></div>
                <span id="errorimage" class="text-danger"></span>
              </div>

              <div id="cropModal" style="display: none;">
                <img id="croppingImage" style="width: 100%;">
                <button type="button" onclick="cropImage()">Crop</button>
                <button type="button" onclick="closeCropper()">Cancel</button>
              </div>




              <div id="cropModal" style="display: none">
                <img id="croppingImage" style="max-width: 100%" />
                <button  type="button" id="cropButton" onclick="cropImage()">
                  Crop Image
                </button>
              </div>

              <div class="card mb-4">
                <div class="card-header">
                  <h4>Brand & Category</h4>
                </div>
                <div class="card-body">
                  <div class="row gx-2">
                    <div class="col-sm-6 mb-3">
                      <label class="form-label">Category</label>
                      <select class="form-select" name="productcategory">
                        <option value="">Select a Category</option>
                        <% categorylist.forEach(category => { %>
                        <option value="<%= category._id %>">
                          <%= category.name %>
                        </option>
                        <% }) %>
                      </select>
                    </div>

                    <div class="col-sm-6 mb-3">
                      <label class="form-label">Brand</label>
                      <select class="form-select" name="productbrand">
                        <option value="">Select a Brand</option>
                        <% brandlist.forEach(brand => { %>
                        <option value="<%= brand._id %>">
                          <%= brand.name %>
                        </option>
                        <% }) %>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
        </div>
      </section>

      <%- include("../layouts/admin/admin_footer.ejs") %>
    </main>

    <script>
      const radios = document.querySelectorAll('input[name="size"]');
      
      const additionalFieldsSM = document.getElementById("additionalFieldsSM");
      const additionalFieldsMedium = document.getElementById("additionalFieldsMedium");
      const additionalFieldsL = document.getElementById("additionalFieldsL");
      

      radios.forEach((radio) => {
        radio.addEventListener("change", () => {
          additionalFieldsSM.style.display = "none";
          additionalFieldsMedium.style.display = "none";
          additionalFieldsL.style.display = "none";

          if (radio.value === "SM") {
            additionalFieldsSM.style.display = "block";
          } else if (radio.value === "Medium") {
            additionalFieldsMedium.style.display = "block";
          } else if (radio.value === "L") {
            additionalFieldsL.style.display = "block";
          }
        });
      });

      function validate() {
        let isValid = true;

        const name = document.getElementById("productname").value.trim();
        if (name.length < 4) {
          document.getElementById("errorname").innerText =
            "Name must be at least 4 characters long";
          isValid = false;
        } else {
          document.getElementById("errorname").innerText = "";
        }

        const descriptons = document.getElementById("productdiscription").value.trim()
        if (descriptons.length < 10) {
          document.getElementById("errdiscription").innerText="Description is required";
            
          isValid = false;
        } else {
          document.getElementById("errdiscription").innerText = "";
        }


        const images = document.getElementById("image").files;
        const allowedExtensions = /(\.jpg|\.jpeg|\.png|\.WEBP)$/i;
        if (images.length === 0) {
          document.getElementById("errorimage").innerText =
            "At least one image must be uploaded";
          isValid = false;
        } else {
          for (let i = 0; i < images.length; i++) {
            if (!allowedExtensions.exec(images[i].name)) {
              document.getElementById("errorimage").innerText =
                "Only .jpg, .jpeg, .png ,.WEBP files are allowed";
              isValid = false;
              break;
            } else {
              document.getElementById("errorimage").innerText = "";
            }
          }     
        }

        return isValid;
      }



let cropper;
let croppedFiles = [];
let originalFiles = [];
let currentFile;
let currentImgElement;
let currentIndex = null; 

function handleFiles(event) {
  const files = event.target.files;

  if (files) {
    Array.from(files).forEach((file) => {
      addImagePreview(file);
      originalFiles.push(file);
    });
  }
}

function addImagePreview(file) {
  const imagePreviewContainer = document.getElementById("imagePreview");
  const reader = new FileReader();

  reader.onload = (e) => {
    const imgContainer = document.createElement("div");
    imgContainer.style.display = "inline-block";
    imgContainer.style.position = "relative";
    imgContainer.style.marginRight = "10px";

    const img = document.createElement("img");
    img.src = e.target.result;
    img.style.width = "100px";
    img.style.cursor = "pointer";
    img.onclick = () => openCropper(e.target.result, img, originalFiles.indexOf(file));

    const removeIcon = document.createElement("i");
    removeIcon.classList.add("fas", "fa-trash-alt");
    removeIcon.style.position = "absolute";
    removeIcon.style.top = "5px";
    removeIcon.style.right = "5px";
    removeIcon.style.cursor = "pointer";
    removeIcon.onclick = (event) => {
      event.stopPropagation(); 
      removeImage(file);
    };

    const replaceIcon = document.createElement("i");
    replaceIcon.classList.add("fas", "fa-sync-alt");
    replaceIcon.style.position = "absolute";
    replaceIcon.style.bottom = "5px";
    replaceIcon.style.right = "5px";
    replaceIcon.style.cursor = "pointer";
    replaceIcon.onclick = (event) => {
      event.stopPropagation(); 
      replaceImage(file);
    };

    imgContainer.appendChild(img);
    imgContainer.appendChild(removeIcon);
    imgContainer.appendChild(replaceIcon);
    imagePreviewContainer.appendChild(imgContainer);
  };

  reader.readAsDataURL(file);
}

function openCropper(imageSrc, imgElement, index) {
  currentFile = croppedFiles[index] || originalFiles[index];
  currentImgElement = imgElement;
  currentIndex = index;

  const cropModal = document.getElementById("cropModal");
  const croppingImage = document.getElementById("croppingImage");
  croppingImage.src = imageSrc;
  cropModal.style.display = "block";

  if (cropper) cropper.destroy();
  cropper = new Cropper(croppingImage, {
    aspectRatio: 1,
    viewMode: 2,
  });
}

function cropImage() {
  const canvas = cropper.getCroppedCanvas();

  canvas.toBlob((blob) => {
    const croppedFile = new File([blob], currentFile.name, { type: "image/png" });

    croppedFiles[currentIndex] = croppedFile;

    const dataTransfer = new DataTransfer();
    originalFiles.forEach((file, index) => {
      dataTransfer.items.add(croppedFiles[index] || file);
    });

    const fileInput = document.getElementById("image");
    fileInput.files = dataTransfer.files;

    currentImgElement.src = URL.createObjectURL(croppedFile);

    document.getElementById("cropModal").style.display = "none";
    cropper.destroy();
    cropper = null;
  }, "image/png");
}

function removeImage(fileToRemove) {
  const fileIndex = originalFiles.indexOf(fileToRemove);
  if (fileIndex > -1) {
    originalFiles.splice(fileIndex, 1);
    croppedFiles.splice(fileIndex, 1);
  }

  const dataTransfer = new DataTransfer();
  originalFiles.forEach((file) => dataTransfer.items.add(file));

  const fileInput = document.getElementById("image");
  fileInput.files = dataTransfer.files;

  document.getElementById("imagePreview").innerHTML = "";
  originalFiles.forEach((file) => addImagePreview(file));
}

function replaceImage(fileToReplace) {
  const fileIndex = originalFiles.indexOf(fileToReplace);
  const newFileInput = document.createElement("input");
  newFileInput.type = "file";
  newFileInput.accept = "image/*";
  newFileInput.onchange = (event) => {
    const newFile = event.target.files[0];
    if (newFile) {
      originalFiles[fileIndex] = newFile;
      croppedFiles[fileIndex] = null;

      const dataTransfer = new DataTransfer();
      originalFiles.forEach((file) => dataTransfer.items.add(file));

      const fileInput = document.getElementById("image");
      fileInput.files = dataTransfer.files;

      document.getElementById("imagePreview").innerHTML = "";
      originalFiles.forEach((file) => addImagePreview(file));
    }
  };
  newFileInput.click();
}

function closeCropper() {
  document.getElementById("cropModal").style.display = "none";
  if (cropper) cropper.destroy();
  cropper = null;
}

      
    </script>
  </body>
</html>
